<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>vRealize Automation Examples</title><link>https://vra-examples.github.io/</link><description>Recent content on vRealize Automation Examples</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://vra-examples.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Basic Auth</title><link>https://vra-examples.github.io/code-stream/custom-integrations/basicauth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vra-examples.github.io/code-stream/custom-integrations/basicauth/</guid><description>To generate a basic authentication header from a username and password in Code Stream you could use a CI task and execute echo -n username:password | base64, then export the result for use later on. A more repeatable way is to create a Custom Integration that takes the two inputs, and returns the encoded header as an output.
Using the shell runtime:
---runtime:shellcode:| export basicAuthHeader=$(echo -n $username:$password | base64)inputProperties:# Username input- name:&amp;#39;username&amp;#39;type:texttitle:&amp;#39;Username&amp;#39;placeHolder:&amp;#39;Enter basic authentication usename&amp;#39;required:truebindable:true# Password input- name:&amp;#39;password&amp;#39;type:passwordtitle:&amp;#39;Password&amp;#39;placeHolder:&amp;#39;Enter basic authentication password&amp;#39;defaultValue:&amp;#39;&amp;#39;required:truebindable:trueoutputProperties:- name:basicAuthHeadertype:labeltitle:BasicAuthenticationHeaderUsing the Python3 runtime:</description></item><item><title>Custom VM Name</title><link>https://vra-examples.github.io/cloud-assembly/extensibility/rename-vm/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vra-examples.github.io/cloud-assembly/extensibility/rename-vm/</guid><description>This action will rename your VM to the value specified inthe custom property userDefinedName - it need to be called at the Compute allocation stage as a blocking task.
Python:
def handler(context, inputs): old_name = inputs[&amp;#34;resourceNames&amp;#34;][0] new_name = inputs[&amp;#34;customProperties&amp;#34;][&amp;#34;userDefinedName&amp;#34;] outputs = {} outputs[&amp;#34;resourceNames&amp;#34;] = inputs[&amp;#34;resourceNames&amp;#34;] outputs[&amp;#34;resourceNames&amp;#34;][0] = new_name print(&amp;#34;Setting machine name from {0} to {1}&amp;#34;.format(old_name, new_name)) return outputs PowerShell:
function handler($context, $payload) { $oldVMName = $payload.resourceNames[0] $newVMName = $payload.customProperties.userDefinedName $returnObj = [PSCustomObject]@{ resourceNames = $payload.</description></item><item><title>Sleep</title><link>https://vra-examples.github.io/code-stream/custom-integrations/sleep/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vra-examples.github.io/code-stream/custom-integrations/sleep/</guid><description>Sleeps for a custom number of seconds set by sleepTime:
---runtime:shellcode:| sleep $sleepTimeinputProperties:- name:&amp;#39;sleepTime&amp;#39;type:numbertitle:&amp;#39;Sleep Time (s)&amp;#39;placeHolder:&amp;#39;Number input&amp;#39;minimum:1maximum:600defaultValue:30</description></item><item><title>Ubuntu Docker Host</title><link>https://vra-examples.github.io/cloud-assembly/cloud-templates/ubuntu-docker-host/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://vra-examples.github.io/cloud-assembly/cloud-templates/ubuntu-docker-host/</guid><description>Deploy an Ubuntu 18.04 template and install Docker. Configure the Docker service and firewall to allow remote connections.
formatVersion:1inputs:user:type:stringtitle:UsernameforSSHdescription:Theusernameyouwouldliketohavefortheinstallation.default:demouserpassword:type:stringpattern:&amp;#39;[a-z0-9A-Z@#$]+&amp;#39;encrypted:truetitle:AdminAccountPassworddescription:ThepasswordyouwouldliketousefortheSystem.resources:dockerhost:type:Cloud.Machineproperties:image:&amp;#39;ubuntu1804&amp;#39;flavor:mediumconstraints:- tag:&amp;#39;cloud:vsphere&amp;#39;cloudConfig:| #cloud-configusers:- name:${input.user}sudo:[&amp;#39;ALL=(ALL) NOPASSWD:ALL&amp;#39;]groups:sudoshell:/bin/bashhostname:&amp;#39;${input.user}-dockerhost&amp;#39;packages:- apt-transport-https- ca-certificates- curl- gnupg-agent- software-properties-commonruncmd:- PASS=${input.password}- USER=${input.user}- echo$USER:$PASS|/usr/sbin/chpasswd- sed-i&amp;#34;s/PasswordAuthentication no/PasswordAuthentication yes/g&amp;#34;/etc/ssh/sshd_config- servicesshreload- curl-fsSLhttps://download.docker.com/linux/ubuntu/gpg|apt-keyadd- - add-apt-repository &amp;#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable&amp;#34;- apt-getupdate- apt-getinstall-yqdocker-cedocker-ce-clicontainerd.io- mkdir-p/etc/systemd/system/docker.service.d/- echo&amp;#34;[Service]&amp;#34;&amp;gt;/etc/systemd/system/docker.service.d/override.conf- echo&amp;#34;ExecStart=&amp;#34;&amp;gt;&amp;gt;/etc/systemd/system/docker.service.d/override.conf- echo&amp;#34;ExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375&amp;#34;&amp;gt;&amp;gt;/etc/systemd/system/docker.service.d/override.conf- systemctldaemon-reload- systemctlrestartdocker.service- ufwallow2375- ufwreloadcloudConfigSettings:phoneHomeTimeoutSeconds:300phoneHomeShouldWait:truephoneHomeFailOnTimeout:true</description></item></channel></rss>